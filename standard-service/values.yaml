## Provide a name in place of the default one as the release name
nameOverride:

## Provide a name to substitute for the full names of resources
fullnameOverride:
  
replicaCount: 1
image:
  pullPolicy: IfNotPresent
terminationGracePeriodSeconds: 30

## Spreads the pods accross nodes evenly
## REF: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
topologySpreadConstraints:
  enabled: false
  maxSkew: 1
  topologyKey: kubernetes.io/hostname
  whenUnsatisfiable: ScheduleAnyway

securityContext:
  fsGroup: 1337
  runAsNonRoot: true

service:
  type: NodePort
  port:
    name: http
    value: 80

container:
  ports:
    name: node
    port: 5000

  ## Configure additional ports
  ##
  ## Example:

  ## - containerPort: 8080
  ##   name: http
  ##
  additionalPorts: []

  ## Configure additional service ports
  ##
  ## Example:

  ## - name: grpc
  ##   port: 50051
  ##   targetPort: 50051
  ##
  additionalServicePorts: []

  ## Override default container args (useful when using custom images)
  args: []

  ## Configures the liveness probe used to determine if the Worker component is up.
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ## ADD it on demand
  # livenessProbe:
  #   failureThreshold: 12
  #   initialDelaySeconds: 20
  #   timeoutSeconds: 10
  #   httpGet:
  #     path: /health
  #     port: node

  ## Configures the readiness probes.
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ## ADD it on demand
  # readinessProbe:
  #   initialDelaySeconds: 20
  #   timeoutSeconds: 10
  #   failureThreshold: 12
  #   httpGet:
  #     path: /health
  #     port: node


  ## Configure lifecyle preStop and postStart handlers
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
  ## lifecycle:
  ##  preStop:
  ##     exec:
  ##       command: ["/bin/sh", "-c", "sleep 60; /usr/sbin/nginx -c /etc/nginx/nginx.conf -s quit; while pgrep -x nginx; do sleep 1; done"]
  lifecycle: []

  ## Configure the main container commands
  command: {}

  # command:
  #   - /bin/sh
  #   - -c
  #   - "while true; do sleep 60; done"

  ## Configure environment variables
  ##
  ## Example:
  ## TESTING_INSTANCE: false
  ##
  ## AWS_REGION: us-east-1
  ##
  env: {}

  # envFrom:
  #   AWS_KEY:
  #     secretKeyRef:
  #       name: aws-credentials
  #       key: key
  envFrom: {}

  ## The names of secrets in the same kubernetes namespace which contain values to be added to the environment
  ## Name is templated.
  ## - name: secret-name
  envFromSecrets: []
  
  # securityContext:
  #   allowPrivilegeEscalation: false
  #   readOnlyRootFilesystem: true
  #   runAsNonRoot: true
  #   runAsUser: 1000

  securityContext: {}

  ## Configure additional volumeMounts
  ##
  ## Example:

  ##  - name: sql-proxy-secret
  ##    mountPath: /secrets/cloudsql
  ##    readOnly: true
  ##
  additionalVolumeMounts: []

  ## Enable Horizontal Pod Autoscaling
  #   minReplicas: 1
  #   maxReplicas: 10
  #   behavior:
  #     scaleDown:
  #       stabilizationWindowSeconds: 1200
  #       selectPolicy: Min
  #       policies:
  #         - type: Percent
  #           value: 10
  #           periodSeconds: 300
  #     scaleUp:
  #       stabilizationWindowSeconds: 60
  #   metrics:
  #   - type: Resource
  #     resource:
  #       name: cpu
  #       targetAverageUtilization: 60
  #   - type: Resource
  #     resource:
  #       name: memory
  #       targetAverageUtilization: 60
  autoscaling: { }

  autoscalerApiVersion: v2

  ## Enable Keda Autoscaling
  # enabled: true
  # authSecretReference:
  # - parameter: GoogleApplicationCredentials
  #   name: some_secret_name
  #   key: credentials.json
  # minReplicaCount: 0
  # maxReplicaCount: 20
  # pollingInterval: 5
  # cooldownPeriod: 5
  # advanced:
  #   horizontalPodAutoscalerConfig:
  #     behavior:
  #       scaleDown:
  #         stabilizationWindowSeconds: 15
  # triggers:
  # - type: gcp-pubsub
  #   authenticationRef:
  #     name: keda-auth
  #   metadata:
  #     mode: "SubscriptionSize"
  #     value: "2"
  #     subscriptionName: "scraping-command-subscription"
  keda:
    enabled: false
    triggers: { }

## Used to change the backend of the service
# REF: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#associating_backendconfig_with_your_ingress
  backend:
    enabled: false
    # Increase backend timeout, usually needed for longer http connections
    # REF: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#timeout
    timeout: 43200
    # REF: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#expandable-1
    connectionDrainingTimeoutSec: 60
    ## Configure custom headers
    # REF: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-configuration#request_headers
    ## Example:

    ## headers:
    ## - "X-Client-Region:{client_region}"
    ## - "X-Client-City:{client_city}"
    ##
    customRequest:
      headers: []


  serviceAccount:
    create: false
    roleRules: []
      # - apiGroups: []
      #   resources: []
      #   verbs: []
    # annotations:
    #   iam.gke.io/gcp-service-account: svc-name@some-project.iam.gserviceaccount.com

  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"

## Configure additional volumes
##   additionalVolumes:
##    - name: sql-proxy-secret
##      secret:
##        secretName: sql-proxy-secret
##
additionalVolumes: []

## Array of extra containers to run alongside the main container
##
## Example:
##
## - name: myapp-container
##   image: busybox
##   command: ['sh', '-c', 'echo Hello && sleep 3600']
##
sidecarContainers: []

## Array of extra initContainers to run alongside the main container
##
## Example:
## - name: myapp-init-container
##   image: busybox
##   command: ['sh', '-c', 'echo Hello && sleep 3600']
##
initContainers: []

## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
##
nodeSelector: {}

## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
## For example:
##
##   - key: "toleration=key"
##     operator: "Equal"
##     value: "value"
##     effect: "NoSchedule"
##
tolerations: []

fluxv2:
  enabled: false
  imageRepository:
    namespace: flux-system
    interval: 5m
    suspend: false
    gcrSecretName: fluxv2-gcr-credentials

##  Add custom annotations for the deployment
## annotations:
##   gke-gcsfuse/volumes: "true" #Required

istio:
  selectors: false

##  Enable Requests Limits for Istio Proxy especially  GKE Autopilot https://cloud.google.com/service-mesh/docs/managed/provision-managed-anthos-service-mesh#custom-injection
##  annotations:
##    autopilot.gke.io/primary-container: container-name
##    sidecar.istio.io/proxyCPU: "200m"
##    sidecar.istio.io/proxyCPULimit: "200m"
##    sidecar.istio.io/proxyMemory: "256Mi"
##    sidecar.istio.io/proxyMemoryLimit: "256Mi"

### Pod Disruption Budget https://kubernetes.io/docs/tasks/run-application/configure-pdb/#create-the-pdb-object
poddisruptionbudget:
  enabled: false
  minAvailable: 1

## Enable postgres resources creation
## Check https://github.com/coremaker/postgres-operator for more details about these fields
# postgres:
#   user:
#     enabled: true
#     username: api
#     deletionProtection: true
#     databaseRef:
#       name: cloudsql-authentication
#       namespace: default
#     passwordSecretRef:
#       generatePassword: true
#       secretName: cloudsql-access-right-credentials
#       passwordKey: USERNAME_PASSWORD
postgres:
  user:
    enabled: false

